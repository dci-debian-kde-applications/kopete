--- a/libkopete/kopetemimetypehandler.cpp
+++ b/libkopete/kopetemimetypehandler.cpp
@@ -128,7 +128,7 @@
 
 		if( mimeHandler )
 		{
-			mimeHandler->handleURL( QString(), url );
+			mimeHandler->handleURL( url );
 			return true;
 		}
 		else
@@ -165,19 +165,30 @@
 		KUrl dest;
 		dest.setPath( file );
 
-		handler->handleURL( mimeType, dest );
+		if( !mimeType.isNull() )
+			handler->handleURL( mimeType, dest );
+		else
+			handler->handleURL( dest );
 
 		// for now, local-only handlers have to be synchronous
 		KIO::NetAccess::removeTempFile( file );
 	}
 	else
 	{
-		handler->handleURL( mimeType, url );
+		if( !mimeType.isNull() )
+			handler->handleURL( mimeType, url );
+		else
+			handler->handleURL( url );
 	}
 
 	return true;
 }
 
+void MimeTypeHandler::handleURL( const KUrl &url ) const
+{
+	Q_UNUSED( url );
+}
+
 void MimeTypeHandler::handleURL( const QString &mimeType, const KUrl &url ) const
 {
 	Q_UNUSED( mimeType );
@@ -200,6 +211,11 @@
 
 void EmoticonMimeTypeHandler::handleURL( const QString &, const KUrl &url ) const
 {
+  handleURL(url);
+}
+
+void EmoticonMimeTypeHandler::handleURL( const KUrl &url ) const
+{
   Emoticons::self()->installTheme( url.toLocalFile() );
 }
 
--- a/libkopete/kopetemimetypehandler.h
+++ b/libkopete/kopetemimetypehandler.h
@@ -67,6 +67,13 @@
 	bool canAcceptRemoteFiles() const;
 
 	/**
+	 * Handles the URL @p url
+	 *
+	 * @param url The url to handle
+	 */
+	virtual void handleURL( const KUrl &url ) const;
+
+	/**
 	 * Handles the URL @p url, which has the mime type @p mimeType
 	 *
 	 * @param mimeType The mime type of the URL
--- a/protocols/irc/ircprotocol.cpp
+++ b/protocols/irc/ircprotocol.cpp
@@ -77,7 +77,7 @@
 	registerAsProtocolHandler(QString::fromLatin1("irc"));
 }
 
-void IRCProtocolHandler::handleURL(const QString &, const KUrl &url) const
+void IRCProtocolHandler::handleURL(const KUrl &url) const
 {
 	kDebug(14120) << url;
 	if (!url.isValid())
--- a/protocols/irc/ircprotocol.h
+++ b/protocols/irc/ircprotocol.h
@@ -52,7 +52,7 @@
 
 		IRCProtocolHandler();
 
-		void handleURL( const QString &, const KUrl &url ) const;
+		void handleURL( const KUrl &url ) const;
 };
 
 static const QString CHAT_VIEW( QString::fromLatin1("kopete_chatwindow") );
--- a/protocols/jabber/jabberprotocol.cpp
+++ b/protocols/jabber/jabberprotocol.cpp
@@ -353,6 +353,11 @@
 
 void JabberProtocol::handleURL(const QString&, const KUrl & kurl) const
 {
+  handleURL(kurl);
+}
+
+void JabberProtocol::handleURL(const KUrl & kurl) const
+{
 	QUrl url=kurl; //QUrl has better query handling.
 	if(url.scheme() != "xmpp" && !url.scheme().isEmpty() )
 		return;
--- a/protocols/jabber/jabberprotocol.h
+++ b/protocols/jabber/jabberprotocol.h
@@ -148,6 +148,7 @@
 	/**
 	 * inherited from Kopete::MimeTypeHandler
 	 */
+	virtual void handleURL( const KUrl & url ) const;
 	virtual void handleURL(const QString&, const KUrl & kurl) const;
 
 private:
--- a/protocols/oscar/aim/aimprotocol.cpp
+++ b/protocols/oscar/aim/aimprotocol.cpp
@@ -43,7 +43,7 @@
 	registerAsProtocolHandler(QString::fromLatin1("aim"));
 }
 
-void AIMProtocolHandler::handleURL(const QString&, const KUrl &url) const
+void AIMProtocolHandler::handleURL(const KUrl &url) const
 {
 /**
  * Send a Message  =================================================
--- a/protocols/oscar/aim/aimprotocol.h
+++ b/protocols/oscar/aim/aimprotocol.h
@@ -29,7 +29,7 @@
 {
 public:
 	AIMProtocolHandler();
-	void handleURL( const QString&, const KUrl & url ) const;
+	void handleURL( const KUrl & url ) const;
 };
 
 class AIMProtocol : public OscarProtocol
--- a/protocols/skype/skypeprotocol.cpp
+++ b/protocols/skype/skypeprotocol.cpp
@@ -46,7 +46,7 @@
 	registerAsProtocolHandler("tell");
 }
 
-void SkypeProtocolHandler::handleURL(const QString &, const KUrl &url) const {
+void SkypeProtocolHandler::handleURL(const KUrl &url) const {
 	kDebug(SKYPE_DEBUG_GLOBAL);
 	if ( ! SkypeProtocol::protocol()->hasAccount() ) {
 		kDebug(SKYPE_DEBUG_GLOBAL) << "No Skype account registered";
@@ -55,6 +55,10 @@
 	SkypeProtocol::protocol()->account()->SkypeActionHandler(url.url());
 }
 
+void SkypeProtocolHandler::handleURL(const QString &, const KUrl &url) const {
+	handleURL(url);
+}
+
 class SkypeProtocolPrivate {
 	private:
 	public:
--- a/protocols/skype/skypeprotocol.h
+++ b/protocols/skype/skypeprotocol.h
@@ -36,6 +36,7 @@
 {
 	public:
 		SkypeProtocolHandler();
+		void handleURL(const KUrl &url) const;
 		void handleURL(const QString &, const KUrl &url) const;
 };
 
--- a/libkopete/kopetecontact.cpp
+++ b/libkopete/kopetecontact.cpp
@@ -274,7 +274,7 @@
 	// through the use of the customContextMenuActions() function
 
 	// Get the custom actions from the protocols ( pure virtual function )
-	QList<KAction*> *customActions = customContextMenuActions();
+	QList<KAction*> *customActions = customContextMenuActions( manager );
 	if( customActions && !customActions->isEmpty() )
 	{
 		menu->addSeparator();
@@ -519,6 +519,11 @@
 }
 
 QList<KAction*> *Contact::customContextMenuActions( ChatSession * /* manager */ )
+{
+	return customContextMenuActions();
+}
+
+QList<KAction*> *Contact::customContextMenuActions( ChatSession * /* manager */ )
 {
 	return customContextMenuActions();
 }
--- a/libkopete/kopetecontact.h
+++ b/libkopete/kopetecontact.h
@@ -237,6 +237,11 @@
 	virtual KDE_DEPRECATED QList<KAction *> *customContextMenuActions( ChatSession *manager );
 
 	/**
+	 * @todo  What is this function for ?
+	 */
+	virtual QList<KAction *> *customContextMenuActions( ChatSession *manager );
+
+	/**
 	 * @brief Get the Context Menu for this contact
 	 *
 	 * This menu includes generic actions common to each protocol, and action defined in
--- a/protocols/skype/skypecontact.cpp
+++ b/protocols/skype/skypecontact.cpp
@@ -361,6 +361,10 @@
 	return actions;
 }
 
+QList<KAction*> *SkypeContact::customContextMenuActions(Kopete::ChatSession *) {
+	return customContextMenuActions();
+}
+
 void SkypeContact::enableActions(bool value) {
 	d->callContactAction->setEnabled(value);
 	d->authorizeAction->setEnabled(value);
--- a/protocols/skype/skypecontact.h
+++ b/protocols/skype/skypecontact.h
@@ -83,6 +83,7 @@
 		bool hasChat() const;
 		///Tell kopete which actions to show in the contact pop-up menu
 		virtual QList<KAction*> *customContextMenuActions();
+		virtual QList<KAction*> *customContextMenuActions(Kopete::ChatSession *);
 		///Give me actually existing chat session
 		SkypeChatSession *getChatSession();
 		///Can this contact be called now?
